{"/home/travis/build/npmtest/node-npmtest-trails/test.js":"/* istanbul instrument in package npmtest_trails */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-trails/lib.npmtest_trails.js":"/* istanbul instrument in package npmtest_trails */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_trails = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_trails = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-trails/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-trails && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_trails */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_trails\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_trails.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_trails.rollup.js'] =\n            local.assetsDict['/assets.npmtest_trails.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_trails.__dirname + '/lib.npmtest_trails.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/index.js":"/*eslint no-console: 0 */\n'use strict'\n\nconst EventEmitter = require('events').EventEmitter\nconst lib = require('./lib')\nconst i18next = require('i18next')\nconst NOOP = function () { }\n\n// inject Error and Resource types into the global namespace\nlib.Core.assignGlobals()\n\n/**\n * The Trails Application. Merges the configuration and API resources\n * loads Trailpacks, initializes logging and event listeners.\n */\nmodule.exports = class TrailsApp extends EventEmitter {\n\n  /**\n   * @param pkg The application package.json\n   * @param app.api The application api (api/ folder)\n   * @param app.config The application configuration (config/ folder)\n   *\n   * Initialize the Trails Application and its EventEmitter parentclass. Set\n   * some necessary default configuration.\n   */\n  constructor (app) {\n    super()\n\n    if (!app) {\n      throw new RangeError('No app definition provided to Trails constructor')\n    }\n    if (!app.pkg) {\n      throw new lib.Errors.PackageNotDefinedError()\n    }\n    if (!app.api) {\n      throw new lib.Errors.ApiNotDefinedError()\n    }\n\n    if (!process.env.NODE_ENV) {\n      process.env.NODE_ENV = 'development'\n    }\n\n    const processEnv = Object.freeze(JSON.parse(JSON.stringify(process.env)))\n\n    Object.defineProperties(this, {\n      env: {\n        enumerable: false,\n        value: processEnv\n      },\n      pkg: {\n        enumerable: false,\n        value: app.pkg\n      },\n      versions: {\n        enumerable: false,\n        writable: false,\n        configurable: false,\n        value: process.versions\n      },\n      config: {\n        value: new lib.Configuration(app.config, processEnv),\n        configurable: true,\n        writable: false\n      },\n      api: {\n        value: app.api,\n        writable: true,\n        configurable: true\n      },\n      _trails: {\n        enumerable: false,\n        value: require('./package')\n      },\n      packs: {\n        value: { }\n      },\n      loadedPacks: {\n        enumerable: false,\n        writable: true,\n        value: [ ]\n      },\n      loadedModules: {\n        enumerable: false,\n        value: lib.Core.getExternalModules(this.pkg)\n      },\n      bound: {\n        enumerable: false,\n        writable: true,\n        value: false\n      },\n      started: {\n        enumerable: false,\n        writable: true,\n        value: false\n      },\n      stopped: {\n        enumerable: false,\n        writable: true,\n        value: false\n      },\n      timers: {\n        enumerable: false,\n        writable: true,\n        value: { }\n      },\n      models: {\n        enumerable: true,\n        writable: false,\n        value: { }\n      },\n      services: {\n        enumerable: true,\n        writable: false,\n        value: { }\n      },\n      controllers: {\n        enumerable: true,\n        writable: false,\n        value: { }\n      },\n      policies: {\n        enumerable: true,\n        writable: false,\n        value: { }\n      },\n      translate: {\n        enumerable: false,\n        writable: true\n      }\n    })\n\n    this.setMaxListeners(this.config.main.maxListeners)\n\n    // instantiate trailpacks\n    this.config.main.packs.forEach(Pack => {\n      try {\n        new Pack(this)\n      }\n      catch (e) {\n        throw new TrailpackError(Pack, e, 'constructor')\n      }\n    })\n    this.loadedPacks = Object.keys(this.packs).map(name => this.packs[name])\n\n    // bind resource methods\n    Object.assign(this.models, lib.Core.bindMethods(this, 'models'))\n    Object.assign(this.services, lib.Core.bindMethods(this, 'services'))\n    Object.assign(this.controllers, lib.Core.bindMethods(this, 'controllers'))\n    Object.assign(this.policies, lib.Core.bindMethods(this, 'policies'))\n  }\n\n  /**\n   * Start the App. Load all Trailpacks.\n   *\n   * @return Promise\n   */\n  start () {\n    lib.Core.bindListeners(this)\n    lib.Trailpack.bindTrailpackPhaseListeners(this, this.loadedPacks)\n    lib.Trailpack.bindTrailpackMethodListeners(this, this.loadedPacks)\n\n    // initialize i18n\n    i18next.init(this.config.i18n, (err, t) => {\n      if (err) {\n        throw new Error(`Problem loading i18n: ${err}`)\n      }\n\n      this.translate = t\n      this.emit('trails:start')\n    })\n\n    return this.after('trails:ready')\n      .then(() => {\n        this.started = true\n        return this\n      })\n  }\n\n  /**\n   * Shutdown. Unbind listeners, unload trailpacks.\n   * @return Promise\n   */\n  stop (err) {\n    this.stopped = true\n    if (err) {\n      this.log.error('\\n', err.stack || '')\n    }\n    if (!this.started) {\n      this.log.error('The application did not boot successfully.')\n      this.log.error('Try increasing the loglevel to \"debug\" to learn more')\n    }\n\n    this.emit('trails:stop')\n    lib.Core.unbindListeners(this)\n\n    return Promise.all(\n      this.loadedPacks.map(pack => {\n        this.log.debug('Unloading trailpack', pack.name, '...')\n        return pack.unload()\n      }))\n      .then(() => {\n        this.log.debug('All trailpacks unloaded. Done.')\n        return this\n      })\n      .catch(err => {\n        console.error(err)\n        return this\n      })\n  }\n\n  /**\n   * @override\n   * Log app events for debugging\n   */\n  emit (event) {\n    this.log.debug('trails event:', event)\n    return super.emit.apply(this, arguments)\n  }\n\n  /**\n   * Resolve Promise once ANY of the events in the list have emitted. Also\n   * accepts a callback.\n   * @return Promise\n   */\n  onceAny (events, handler) {\n    handler || (handler = NOOP)\n    if (!Array.isArray(events)) {\n      events = [events]\n    }\n\n    let resolveCallback\n    const handlerWrapper = function () {\n      handler.apply(null, arguments)\n      return arguments\n    }\n\n    return Promise.race(events.map(eventName => {\n      return new Promise(resolve => {\n        resolveCallback = resolve\n        this.once(eventName, resolveCallback)\n      })\n    }))\n    .then(handlerWrapper)\n    .then(args => {\n      events.forEach(eventName => this.removeListener(eventName, resolveCallback))\n      return args\n    })\n  }\n\n  /**\n   * Resolve Promise once all events in the list have emitted. Also accepts\n   * a callback.\n   * @return Promise\n   */\n  after (events, handler) {\n    handler || (handler = NOOP)\n    if (!Array.isArray(events)) {\n      events = [ events ]\n    }\n\n    const handlerWrapper = (args) => {\n      handler(args)\n      return args\n    }\n\n    return Promise.all(events.map(eventName => {\n      return new Promise(resolve => {\n        if (eventName instanceof Array){\n          this.onceAny(eventName, resolve)\n        }\n        else {\n          this.once(eventName, resolve)\n        }\n      })\n    }))\n    .then(handlerWrapper)\n  }\n\n  /**\n   * Prevent changes to the app configuration\n   */\n  freezeConfig () {\n    this.config.freeze(this.loadedModules)\n  }\n\n  /**\n   * Allow changes to the app configuration\n   */\n  unfreezeConfig () {\n    Object.defineProperties(this, {\n      config: {\n        value: new lib.Configuration(this.config.unfreeze(), this.env),\n        configurable: true\n      }\n    })\n  }\n\n  /**\n   * Create any configured paths which may not already exist.\n   */\n  createPaths () {\n    if (this.config.main.createPaths === false) {\n      this.log.warn('createPaths is disabled. Configured paths will not be created')\n    }\n    return lib.Core.createDefaultPaths(this)\n  }\n\n  /**\n   * Expose the logger on the app object. The logger can be configured by\n   * setting the \"config.log.logger\" config property.\n   */\n  get log () {\n    return this.config.log.logger\n  }\n\n  /**\n   * Expose the i18n translator on the app object. Internationalization can be\n   * configured in config.i18n\n   */\n  get __ () {\n    return this.translate\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/index.js":"'use strict'\n\nexports.i18n = require('./i18n')\nexports.Trailpack = require('./trailpack')\nexports.Errors = require('./errors')\nexports.Pathfinder = require('./pathfinder')\nexports.Core = require('./core')\nexports.Schemas = require('./schemas')\nexports.Configuration = require('./Configuration')\n//exports.ConfigProxy = require('./ConfigProxy')\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/i18n.js":"'use strict'\n\nmodule.exports = {\n\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/trailpack.js":"'use strict'\n\nmodule.exports = {\n\n  /**\n   * Bind lifecycle boundary event listeners. That is, when all trailpacks have\n   * completed a particular phase, e.g. \"configure\" or \"initialize\", emit an\n   * :all:<phase> event.\n   */\n  bindTrailpackPhaseListeners (app, packs) {\n    const validatedEvents = packs.map(pack => `trailpack:${pack.name}:validated`)\n    const configuredEvents = packs.map(pack => `trailpack:${pack.name}:configured`)\n    const initializedEvents = packs.map(pack => `trailpack:${pack.name}:initialized`)\n\n    app.after(configuredEvents)\n      .then(() => app.createPaths())\n      .then(() => app.emit('trailpack:all:configured'))\n      .catch(err => app.stop(err))\n\n    app.after(validatedEvents)\n      .then(() => app.emit('trailpack:all:validated'))\n      .catch(err => app.stop(err))\n\n    app.after(initializedEvents)\n      .then(() => {\n        app.emit('trailpack:all:initialized')\n        app.emit('trails:ready')\n      })\n      .catch(err => app.stop(err))\n  },\n\n  /**\n   * Bind individual lifecycle method listeners. That is, when each trailpack\n   * completes each lifecycle, fire individual events for those trailpacks.\n   */\n  bindTrailpackMethodListeners (app, packs) {\n    packs.map(pack => {\n      const lifecycle = pack.config.lifecycle\n\n      app.after(lifecycle.initialize.listen.concat('trailpack:all:configured'))\n        .then(() => app.log.debug('trailpack: initializing', pack.name))\n        .then(() => pack.initialize())\n        .catch(err => app.stop(err))\n        .then(() => app.emit(`trailpack:${pack.name}:initialized`))\n\n      app.after(lifecycle.configure.listen.concat('trailpack:all:validated'))\n        .then(() => app.log.debug('trailpack: configuring', pack.name))\n        .then(() => pack.configure())\n        .catch(err => app.stop(err))\n        .then(() => app.emit(`trailpack:${pack.name}:configured`))\n\n      app.after('trails:start')\n        .then(() => app.log.debug('trailpack: validating', pack.name))\n        .then(() => pack.validate())\n        .catch(err => app.stop(err))\n        .then(() => app.emit(`trailpack:${pack.name}:validated`))\n    })\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/errors/index.js":"exports.ApiNotDefinedError = require('./ApiNotDefinedError')\nexports.ConfigNotDefinedError = require('./ConfigNotDefinedError')\nexports.ConfigValueError = require('./ConfigValueError')\nexports.GraphCompletenessError = require('./GraphCompletenessError')\nexports.IllegalAccessError = require('./IllegalAccessError')\nexports.LoggerNotDefinedError = require('./LoggerNotDefinedError')\nexports.NamespaceConflictError = require('./NamespaceConflictError')\nexports.PackageNotDefinedError = require('./PackageNotDefinedError')\nexports.TimeoutError = require('./TimeoutError')\nexports.TrailpackError = require('./TrailpackError')\nexports.ValidationError = require('./ValidationError')\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/errors/ApiNotDefinedError.js":"'use strict'\n\nmodule.exports = class ApiNotDefinedError extends RangeError {\n  constructor() {\n    super(`\n      \"api\" must be given to the Trails constructor, or to the start() method.\n      Application cannot start.\n\n      e.g.\n      1) Send \"api\" to the constructor\n         const app = new TrailsApp({\n           pkg: require('./package'),\n     -->   api: require('./api'),\n           config: require('./config')\n         })\n\n      -- OR --\n\n      2) Send \"api\" to the start() method:\n         const app = new TrailsApp({\n           pkg: require('./package'),\n           config: require('./config')\n         })\n         app.start({ api: require('./api') })\n\n      For more info, see the Trails archetypes:\n        - https://git.io/vw845\n        - https://git.io/vw84F\n      `)\n  }\n\n  get name () {\n    return 'ApiNotDefinedError'\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/errors/ConfigNotDefinedError.js":"'use strict'\n\nmodule.exports = class ConfigNotDefinedError extends RangeError {\n  constructor() {\n    super(`\n      \"config\" must be given to the Trails constructor, and it must contain\n      an object called \"main\". Application cannot start.\n      e.g.\n\n      const app = new TrailsApp({\n        pkg: require('./package'),\n        api: require('./api'),\n  -->   config: require('./config')\n      })\n\n      For more info, see the Trails archetypes:\n        - https://git.io/vw845\n        - https://git.io/vw84F\n    `)\n  }\n\n  get name () {\n    return 'ConfigNotDefinedError'\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/errors/ConfigValueError.js":"'use strict'\n\nmodule.exports = class ConfigValueError extends RangeError {\n  constructor(msg) {\n    super(msg)\n  }\n\n  get name () {\n    return 'ConfigValueError'\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/errors/GraphCompletenessError.js":"'use strict'\n\nmodule.exports = class GraphCompletenessError extends RangeError {\n  constructor (pack, stageName, eventName) {\n    pack || (pack = { })\n    super(`\n      The trailpack \"${pack.name}\" cannot load.\n\n      During the \"${stageName}\" lifecycle stage, \"${pack.name}\" waits for\n      the event \"${eventName}\". This event will not be emitted for one\n      of the following reasons:\n\n        1. The event \"${eventName}\" is emitted by a another Trailpack\n           that, due to its configuration, paradoxically requires that\n           \"${pack.name}\" loaded before it.\n\n        2. The event \"${eventName}\" is not emitted by any other Trailpack,\n           or it is not properly declared in the Trailpack's lifecycle\n           config.\n\n      Please check that you have all the Trailpacks correctly installed\n      and configured. If you think this is a bug, please file an issue:\n      https://github.com/trailsjs/trails/issues.\n    `)\n\n  }\n\n  get name () {\n    return 'GraphCompletenessError'\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/errors/IllegalAccessError.js":"'use strict'\n\nmodule.exports = class IllegalAccessError extends Error {\n  constructor(msg) {\n    super(msg)\n  }\n\n  get name () {\n    return 'IllegalAccessError'\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/errors/LoggerNotDefinedError.js":"'use strict'\n\nmodule.exports = class LoggerNotDefinedError extends RangeError {\n  constructor() {\n    super(`\n      A logger must be set at config.log.logger. Application cannot start.\n      e.g. in config/log.js:\n\n      const winston = require('./winston')\n      module.exports = {\n        logger: new winston.Logger({\n          transports: [\n            new winston.transports.Console()\n          ]\n        })\n      }\n\n      For more info, see the config.log archetype: https://git.io/vVvUI\n    `)\n  }\n\n  get name () {\n    return 'LoggerNotDefinedError'\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/errors/NamespaceConflictError.js":"'use strict'\n\nmodule.exports = class NamespaceConflictError extends Error {\n  constructor (key, globals) {\n    super(`\n      The extant global variable \"${key}\" conflicts with the value provided by\n      Trails.\n\n      Trails defines the following variables in the global namespace:\n      ${globals}\n    `)\n  }\n\n  get name () {\n    return 'NamespaceConflictError'\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/errors/PackageNotDefinedError.js":"'use strict'\n\nmodule.exports = class PackageNotDefinedError extends RangeError {\n  constructor() {\n    super(`\n      A \"pkg\" must be given to the Trails constructor. Application cannot start.\n      e.g.\n      const app = new TrailsApp({\n  -->   pkg: require('./package'),\n        api: require('./api'),\n        config: require('./config')\n      })\n\n      For more info, see the Trails archetypes:\n        - https://git.io/vw845\n        - https://git.io/vw84F\n      `)\n  }\n\n  get name () {\n    return 'PackageNotDefinedError'\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/errors/TimeoutError.js":"'use strict'\n\nmodule.exports = class TimeoutError extends Error {\n  constructor(phase, timeout) {\n    super(`\n      Timeout during \"${phase}\". Exceeded configured timeout of ${timeout}ms\n    `)\n  }\n\n  get name () {\n    return 'TimeoutError'\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/errors/TrailpackError.js":"'use strict'\n\nmodule.exports = class TrailpackError extends Error {\n  constructor (pack, error, stage) {\n    pack || (pack = { constructor: { }})\n    super(`\n      ${pack.name} trailpack failed in the \"${stage}\" stage.\n      ${error}\n    `)\n  }\n\n  get name () {\n    return 'TrailpackError'\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/errors/ValidationError.js":"'use strict'\n\n/**\n * Generic validation error; commonly used to wrap joi errors, but can be\n * used for any validation-related exception.\n */\nmodule.exports = class ValidationError extends Error {\n  constructor (msg, details) {\n    super(msg + '\\n' + ValidationError.humanizeMessage(details))\n  }\n\n  get name () {\n    return 'ValidationError'\n  }\n\n  /**\n   * Humanize a list of error details\n   *\n   * @param details a joi-style \"details\" list\n   * @param details.message\n   * @param details.path\n   * @param details.type\n   * @param details.context\n   * @return String\n   */\n  static humanizeMessage (details) {\n    const preamble = 'The following configuration values are invalid: '\n    const paths = (details || [ ]).map(d => d.path.replace(/\\.(\\d)+$/, '[$1]'))\n\n    return preamble + paths.join(', ')\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/pathfinder.js":"'use strict'\n\nconst Errors = require('./errors')\n\nconst lifecycleStages = [\n  'configure',\n  'initialize'\n]\n\nconst Pathfinder = module.exports = {\n\n  /**\n   * Return true if the trailpack dependency graph is \"complete\"; i.e., that\n   * the lifecycle paths for all packs and all stages are valid.\n   */\n  isComplete (packs) {\n    return packs.every(pack => {\n      return Pathfinder.isLifecycleValid (pack, packs)\n    })\n  },\n\n  /**\n   * Return true if all stages for a pack are valid; false otherwise\n   */\n  isLifecycleValid (pack, packs) {\n    return lifecycleStages.every(stageName => {\n      return Pathfinder.isLifecycleStageValid (pack, stageName, packs)\n    })\n  },\n\n  /**\n   * Return true if a particular stage is valid for the given pack; false\n   * otherwise\n   */\n  isLifecycleStageValid (pack, stageName, packs) {\n    if (!stageName || lifecycleStages.indexOf(stageName) === -1) {\n      throw new TypeError(`isLifecycleStageValid: stageName must be one of ${lifecycleStages}`)\n    }\n    const path = Pathfinder.getLifecyclePath(pack, stageName, packs)\n    const terminals = Pathfinder.getPathErrors(path)\n    return !terminals.some(t => t instanceof Error)\n  },\n\n  /**\n   * Traverse the lifecycle path and return the terminal values for each of its\n   * branches (lifecycle events)\n   */\n  getPathErrors (path) {\n    if (typeof path === 'boolean') {\n      return [ ]\n    }\n    if (path instanceof Error) {\n      return [ path ]\n    }\n    return Object.keys(path)\n      .map(key => Pathfinder.getPathErrors(path[key]))\n      .reduce((terminals, t) => terminals.concat(t), [ ])\n  },\n\n  getLifecyclePath (pack, stageName, packs, path) {\n    const stage = pack.config.lifecycle[stageName] || { }\n\n    if (!path) {\n      return Pathfinder.getLifecyclePath (pack, stageName, packs, [ pack ])\n    }\n\n    // terminate traversal. if current pack waits for no events, then it\n    // necessarily reaches the sink, and indicates a complete path.\n    if (!stage.listen || stage.listen.length === 0) {\n      return true\n    }\n\n    // find all packs that produce the event(s) that the current pack requires\n    const producers = stage.listen\n      .map(eventName => {\n        return Pathfinder.getEventProducer (eventName, stageName, packs, path)\n      })\n      .filter(producer => !!producer)\n\n\n    // return first error encountered in this path. terminate traversal.\n    // one or more of the required events are not available.\n    const error = producers.find(producer => producer instanceof Errors.GraphCompletenessError)\n    if (error) {\n      return error\n    }\n\n    // all producers must themselves have complete paths.\n    return producers.reduce((level, producer) => {\n      const subpath = path.concat(producer)\n      level[producer.name] = Pathfinder.getLifecyclePath(producer, stageName, packs, subpath)\n      return level\n    }, { })\n  },\n\n  /**\n   * Return all packs that produce a given event, but which is not contained\n   * in the given \"path\" list.\n   */\n  getEventProducer (eventName, stageName, packs, path) {\n    const producers = packs\n      .filter(pack => {\n        const stage = pack.config.lifecycle[stageName]\n        return path.indexOf(pack) === -1 && stage.emit.indexOf(eventName) >= 0\n      })\n\n    if (producers.length > 1) {\n      return new Error(`More than one trailpack produces the event ${eventName}`)\n    }\n    if (producers.length === 0) {\n      return new Errors.GraphCompletenessError(path[path.length - 1], stageName, eventName)\n    }\n\n    return producers[0]\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/core.js":"/*eslint no-console: 0 */\n'use strict'\n\nconst path = require('path')\nconst fs = require('fs')\nconst _ = require('lodash')\nconst mkdirp = require('mkdirp')\nconst lib = require('./')\n\nconst Core = module.exports = {\n\n  reservedMethods: [\n    'app',\n    'api',\n    'log',\n    '__',\n    'constructor',\n    'undefined',\n    'methods',\n    'config',\n    'schema'\n  ],\n\n  globals: Object.freeze(Object.assign({\n    Service: require('../service'),\n    Controller: require('../controller'),\n    Policy: require('../policy'),\n    Model: require('../model')\n  }, lib.Errors)),\n\n  globalPropertyOptions: Object.freeze({\n    writable: false,\n    enumerable: false,\n    configurable: false\n  }),\n\n  /**\n   * Prepare the global namespace with required Trails types. Ignore identical\n   * values already present; fail on non-matching values.\n   *\n   * @throw NamespaceConflictError\n   */\n  assignGlobals () {\n    _.each(lib.Core.globals, (type, name) => {\n      if (global[name] === type) return\n      if (global[name] && global[name] !== type) {\n        throw new lib.Errors.NamespaceConflictError(name, Object.keys(lib.Core.globals))\n      }\n      const descriptor = Object.assign({ value: type }, lib.Core.globalPropertyOptions)\n      Object.defineProperty(global, name, descriptor)\n    })\n  },\n\n  /**\n   * Bind the context of API resource methods.\n   */\n  bindMethods (app, resource) {\n    return _.mapValues(app.api[resource], (Resource, resourceName) => {\n      if (_.isPlainObject(Resource)) {\n        throw new Error(`${resourceName} should be a class. It is a regular object`)\n      }\n\n      const obj = new Resource(app)\n\n      obj.methods = Core.getClassMethods(obj)\n      _.forEach(obj.methods, method => {\n        obj[method] = obj[method].bind(obj)\n      })\n      return obj\n    })\n  },\n\n  /**\n   * Traverse protoype chain and aggregate all class method names\n   */\n  getClassMethods (obj) {\n    const props = [ ]\n    const objectRoot = new Object()\n\n    while (!obj.isPrototypeOf(objectRoot)) {\n      Object.getOwnPropertyNames(obj).forEach(prop => {\n        if (props.indexOf(prop) === -1 &&\n            !_.includes(Core.reservedMethods, prop) &&\n            _.isFunction(obj[prop])) {\n\n          props.push(prop)\n        }\n      })\n      obj = Object.getPrototypeOf(obj)\n    }\n\n    return props\n  },\n\n  /**\n   * Create configured paths if they don't exist\n   */\n  createDefaultPaths (app) {\n    const paths = app.config.main.paths\n\n    return Promise.all(_.map(paths, (dir, pathName) => {\n      return new Promise((resolve, reject) => {\n        fs.stat(dir, (err, stats) => {\n          resolve({ err, stats })\n        })\n      })\n      .then(result => {\n        const stats = result.stats\n\n        if (stats && !stats.isDirectory()) {\n          app.log.error('The configured path \"', pathName, '\" is not a directory.')\n          app.log.error('config.main.paths should only contain paths to directories')\n          return Promise.reject()\n        }\n\n        return result\n      })\n      .then(stat => {\n        if (stat.err && /no such file or directory/.test(stat.err.message)) {\n          app.log.debug('Trails is creating the path (', pathName, ') at', dir)\n        }\n        mkdirp.sync(dir)\n      })\n    }))\n  },\n\n  /**\n   * During config object inspection, we need to determine whether an arbitrary\n   * object is an external module loaded from a require statement. For example,\n   * the config object will contain trailpack modules, and we do not necessarily\n   * want to deep freeze all of them. In general, messing directly with loaded\n   * modules is not safe.\n   */\n  getExternalModules () {\n    const rootPath = path.resolve(path.dirname(require.main.filename))\n    const modulePath = path.join(rootPath, 'node_modules')\n    const requiredModules = Object.keys(require.cache).filter(mod => {\n      return mod.indexOf(modulePath) >= 0\n    })\n    return requiredModules\n  },\n\n\n  /**\n   * Bind listeners various application events\n   */\n  bindListeners (app) {\n    if (app.bound) {\n      app.log.warn('Someone attempted to bindListeners() twice! Stacktrace below.')\n      app.log.warn(console.trace())   // eslint-disable-line no-console\n      return\n    }\n\n    Core.bindApplicationListeners(app)\n    app.bound = true\n  },\n\n  /**\n   * Bind listeners to trails application events\n   */\n  bindApplicationListeners (app) {\n    app.once('trailpack:all:configured', () => {\n      if (app.config.main.freezeConfig !== true) {\n        app.log.warn('freezeConfig is disabled. Configuration will not be frozen.')\n        app.log.warn('Please only use this flag for testing/debugging purposes.')\n      }\n\n      app.freezeConfig()\n    })\n    app.once('trailpack:all:initialized', () => {\n      app.log.silly(app.config.motd.silly.initialized)\n      app.log.info(app.config.motd.info.initialized)\n    })\n    app.once('trails:ready', () => {\n      app.log.info(app.config.motd.info.ready(app))\n      app.log.debug(app.config.motd.debug.ready(app))\n      app.log.silly(app.config.motd.silly.ready(app))\n\n      app.log.info(app.config.motd.hr)\n    })\n    app.once('trails:stop', () => {\n      app.log.silly(app.config.motd.silly.stop)\n      app.log.info(app.config.motd.info.stop)\n      app.unfreezeConfig()\n    })\n    app.once('trails:error:fatal', err => app.stop(err))\n  },\n\n  /**\n   * Unbind all listeners that were bound during application startup\n   */\n  unbindListeners (app) {\n    app.removeAllListeners()\n    app.bound = false\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/service.js":"module.exports = require('trails-service')\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/node_modules/trails-service/index.js":"'use strict'\n\n/**\n * Trails Service Class.\n */\nmodule.exports = class TrailsService {\n  constructor (app) {\n    Object.defineProperty(this, 'app', {\n      enumerable: false,\n      value: app\n    })\n  }\n\n  get log (){\n    return this.app.log\n  }\n\n  get __ (){\n    return this.app.__\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/controller.js":"module.exports = require('trails-controller')\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/node_modules/trails-controller/index.js":"'use strict'\n\n/**\n * Trails Controller Class.\n */\nmodule.exports = class TrailsController {\n\n  constructor (app) {\n    Object.defineProperty(this, 'app', {\n      enumerable: false,\n      value: app\n    })\n  }\n\n  /**\n   * Controller configuration\n   */\n  static config () {\n  }\n\n  /**\n   * Return the id of this controller\n   */\n  get id () {\n    return this.constructor.name.replace(/(\\w+)Controller/, '$1').toLowerCase()\n  }\n\n  get log () {\n    return this.app.log\n  }\n\n  get __ () {\n    return this.app.__\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/policy.js":"module.exports = require('trails-policy')\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/node_modules/trails-policy/index.js":"'use strict'\n\n/**\n * Trails Policy Class.\n */\nmodule.exports = class TrailsPolicy {\n  constructor(app) {\n    Object.defineProperty(this, 'app', {\n      enumerable: false,\n      value: app\n    })\n  }\n\n  /**\n   * Policy configuration\n   */\n  static config() {\n  }\n\n  get log() {\n    return this.app.log\n  }\n\n  get __() {\n    return this.app.__\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/model.js":"module.exports = require('trails-model')\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/node_modules/trails-model/index.js":"'use strict'\n\n/**\n * Trails Model Class.\n */\nmodule.exports = class TrailsModel {\n\n  constructor (app) {\n    Object.defineProperty(this, 'app', {\n      enumerable: false,\n      value: app\n    })\n  }\n\n  /**\n   * Model configuration\n   */\n  static config () {\n  }\n\n  /**\n   * Model schema. The definition of its fields, their types, indexes,\n   * foreign keys, etc go here.\n   */\n  static schema () {\n  }\n\n  /**\n   * Return the name of this model\n   */\n  getModelName () {\n    return this.constructor.name.toLowerCase()\n  }\n\n  /**\n   * Return the name of the database table or collection\n   */\n  getTableName () {\n    const config = this.constructor.config() || { }\n    return config.tableName || this.getModelName()\n  }\n\n  get log () {\n    return this.app.log\n  }\n\n  get __ () {\n    return this.app.packs.core.i18n.t\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/schemas/index.js":"exports.api = require('./api')\nexports.config = require('./config')\nexports.package = require('./package')\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/schemas/api.js":"const joi = require('joi')\n\nmodule.exports = joi.object().keys({\n  controllers: joi.object().required(),\n  models: joi.object().required(),\n  policies: joi.object().required(),\n  services: joi.object().required(),\n  config: joi.object().optional()\n}).unknown()\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/schemas/config.js":"const joi = require('joi')\n\nmodule.exports = joi.object().keys({\n  main: joi.object().keys({\n    packs: joi.array(),\n    paths: joi.object().keys({\n      root: joi.string().required()\n    }).unknown(),\n    freezeConfig: joi.bool()\n  }).required().unknown(),\n\n  env: joi.string().required(),\n\n  log: joi.object().keys({\n    logger: joi.object()\n  }).unknown()\n\n}).unknown()\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/schemas/package.js":"const joi = require('joi')\n\nmodule.exports = joi.object().keys({\n  dependencies: joi.object().keys({\n    trails: joi.string()\n  }).unknown()\n}).unknown()\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/Configuration.js":"/*eslint no-console: 0 */\n'use strict'\n\nconst _ = require('lodash')\nconst path = require('path')\nconst joi = require('joi')\nconst schemas = require('./schemas')\n\nmodule.exports = class Configuration extends Map {\n  constructor (configTree, processEnv) {\n    super()\n\n    this.modules = [ ]\n    this.immutable = false\n    this.env = processEnv\n    this.tree = Configuration.buildConfig(configTree, processEnv.NODE_ENV)\n\n    Configuration.validateConfig(this.tree)\n\n    // this looks somewhat strange; I'd like to use a Proxy here, but Node 4\n    // does not support it. These properties will be exposed via a Proxy\n    // for v3.0 when Node 4 support can be dropped.\n    Object.assign(this, this.tree)\n  }\n\n  /**\n   * @override\n   */\n  get (key) {\n    return _.get(this, key)\n  }\n\n  /**\n   * @override\n   */\n  set (key, val) {\n    return _.set(this, key, val)\n  }\n\n  /**\n   * @override\n   */\n  freeze (modules) {\n    this.immutable = true\n    this.modules = modules\n    Configuration.freezeConfig(this, modules)\n  }\n\n  unfreeze () {\n    return Configuration.unfreezeConfig(this, this.modules)\n  }\n\n  /**\n   * Copy and merge the provided configuration into a new object, decorated with\n   * necessary default and environment-specific values.\n   */\n  static buildConfig (initialConfig, nodeEnv) {\n    const root = path.resolve(path.dirname(require.main.filename))\n    const temp = path.resolve(root, '.tmp')\n    const envConfig = initialConfig.env && initialConfig.env[nodeEnv]\n\n    const configTemplate = {\n      main: {\n        maxListeners: 128,\n        packs: [ ],\n        paths: {\n          root: root,\n          temp: temp,\n          sockets: path.resolve(temp, 'sockets'),\n          logs: path.resolve(temp, 'log')\n        },\n        timeouts: {\n          start: 10000,\n          stop: 10000\n        },\n        freezeConfig: true,\n        createPaths: true\n      },\n      log: { },\n      motd: require('./motd')\n    }\n\n    const mergedConfig = _.merge(configTemplate, initialConfig, (envConfig || { }))\n    mergedConfig.env = nodeEnv\n\n    return mergedConfig\n  }\n\n  /**\n   * Validate the structure and prerequisites of the configuration object. Throw\n   * an Error if invalid; invalid configurations are unrecoverable and require\n   * that the programmer fix them.\n   */\n  static validateConfig (config) {\n    if (!config || !config.main) {\n      throw new ConfigNotDefinedError()\n    }\n\n    if (!config.log || !config.log.logger) {\n      throw new LoggerNotDefinedError()\n    }\n\n    const nestedEnvs = Configuration.getNestedEnv(config)\n    if (nestedEnvs.length) {\n      throw new ConfigValueError('Environment configs cannot contain an \"env\" property')\n    }\n\n    if (config.env && config.env.env) {\n      throw new ConfigValueError('config.env cannot contain an \"env\" property')\n    }\n\n    const result = joi.validate(config, schemas.config)\n    if (result.error) {\n      throw new ValidationError('Project Configuration Error', result.error.details)\n    }\n  }\n\n  /**\n   * Check to see if the user defined a property config.env[env].env\n   */\n  static getNestedEnv (config) {\n    const env = (config && config.env)\n    const nestedEnvs = Object.keys(env || { }).filter(key => {\n      return !!env[key].env\n    })\n\n    return nestedEnvs\n  }\n\n  /**\n   * Deep freeze application config object. Exceptions are made for required\n   * modules that are listed as dependencies in the application's\n   * package definition (package.json). Trails takes a firm stance that\n   * configuration should be modified only by the developer, the environment,\n   * and the trailpack configuration phase -- never by the application itself\n   * during runtime.\n   *\n   * @param config the configuration object to be frozen.\n   * @param [pkg] the package definition to use for exceptions. optional.\n   */\n  static freezeConfig (config, modules) {\n    _.each(config, (prop, name) => {\n      if (!prop || typeof prop !== 'object' || prop.constructor !== Object) {\n        return\n      }\n\n      const ignoreModule = modules.find(moduleId => require.cache[moduleId].exports === prop)\n      if (ignoreModule) {\n        return\n      }\n      Configuration.freezeConfig(prop, modules)\n    })\n\n    Object.freeze(config)\n  }\n\n  /**\n   * Copy the configuration into a normal, unfrozen object\n   */\n  static unfreezeConfig (config, modules) {\n    const unfreeze = (target, source) => {\n      const propNames = Object.getOwnPropertyNames(source)\n\n      propNames.forEach(name => {\n        const prop = source[name]\n\n        if (!prop || typeof prop !== 'object' || prop.constructor !== Object) {\n          target[name] = prop\n          return\n        }\n\n        const ignoreModule = modules.find(moduleId => require.cache[moduleId].exports === prop)\n        if (ignoreModule) {\n          return\n        }\n\n        target[name] = { }\n        unfreeze(target[name], prop)\n      })\n\n      return target\n    }\n    return unfreeze({ }, config)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/server.js":"/**\n * @module server\n *\n * Start up the Trails Application.\n */\n\n'use strict'\n\nconst TrailsApp = require('trails')\nconst app = require('./')\nconst server = new TrailsApp(app)\n\nserver.start().catch(err => server.stop(err))\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/index.js":"'use strict'\n\nexports.pkg = require('./package')\nexports.config = require('./config')\nexports.api = require('./api')\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/config/index.js":"/**\n * Trails Core Configuration\n * (app.config)\n */\n\n'use strict'\n\nexports.env = require('./env')\nexports.log = require('./log')\nexports.main = require('./main')\n\nexports.database = require('./database')\nexports.i18n = require('./i18n')\nexports.policies = require('./policies')\nexports.routes = require('./routes')\nexports.session = require('./session')\nexports.views = require('./views')\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/config/env/index.js":"'use strict'\n\nexports.development = require('./development')\nexports.staging = require('./staging')\nexports.production = require('./production')\nexports.testing = require('./testing')\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/config/env/development.js":"'use strict'\n\nmodule.exports = {}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/config/env/staging.js":"'use strict'\n\nmodule.exports = {}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/config/env/production.js":"'use strict'\n\nconst winston = require('winston')\n\nmodule.exports = {\n\n  trailpack: {\n    disabled: [\n      'repl'\n    ]\n  },\n\n  log: {\n    logger: new winston.Logger({\n      level: 'info',\n      exitOnError: false,\n      transports: [\n        new winston.transports.Console({\n          timestamp: true\n        }),\n        new winston.transports.File({\n          name: 'info-file',\n          level: 'info',\n          filename: 'trails-info.log',\n          timestamp: true\n        }),\n        new winston.transports.File({\n          name: 'error-file',\n          level: 'error',\n          filename: 'trails-error.log',\n          timestamp: true\n        })\n      ]\n    })\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/lib/motd.js":"/*eslint max-len: 0 */\nconst _ = require('lodash')\n\nmodule.exports = {\n  hr: '---------------------------------------------------------------',\n\n  info: {\n    start: 'Starting...',\n    stop: 'Shutting down...',\n    initialized: 'All trailpacks are loaded.',\n    ready (app) {\n      const baseUrl = _.get(app.config, 'web.baseUrl') ||\n          `http://${_.get(app.config, 'web.host') || 'localhost'}:${_.get(app.config, 'web.port') || '80'}`\n      return (\n        `---------------------------------------------------------------\n        ${new Date()}\n        Basic Info\n          Application       : ${app.pkg.name}\n          Application root  : ${baseUrl}\n          Version           : ${app.pkg.version}\n          Environment       : ${process.env.NODE_ENV}`\n      )\n    }\n  },\n\n  debug: {\n    ready (app) {\n      return (\n        ` Database Info\n          ORM               : ${_.get(app.config, 'database.orm') || 'NOT INSTALLED'}\n          Stores            : ${_.get(app.config, 'database.orm') ? Object.keys(app.config.database.stores) : 'N/A'}\n        Web Server Info\n          Server            : ${_.get(app.config, 'web.server') || 'NOT INSTALLED'}\n          View Engine       : ${_.get(app.config, 'views.engine') || 'NOT INSTALLED'}\n          Port              : ${_.get(app.config, 'web.port') || 'N/A'}\n          Routes            : ${(app.routes || [ ]).length}`\n      )\n    }\n  },\n\n  silly: {\n    stop: `\n      Happy trails to you, until we meet again.\n      - Dale Evans\n    `,\n\n    ready (app) {\n      return (\n        ` API\n          Models            : ${_.keys(app.api.models)}\n          Controllers       : ${_.keys(app.api.controllers)}\n          Policies          : ${_.keys(app.api.policies)}\n          Trailpacks        : ${_.map(app.packs, pack => pack.name)}`\n      )\n    },\n\n    initialized: `\n                 ..@@@@..                   .@.                                                  @@\n            .@@@@@@@@@@@@@@@@.              @@@                                                  @@\n         .@@@@'            '@@@@.           @@@                                                  @@\n       @@@@                    @@@@         @@@                                           ..     @@\n     .@@;                        '@@.       @@@                                         .@@@@.   @@\n    @@@    .@@@.         .@@@@.    @@@      @@@@@@@@@  @@@@@@@@@  @@@@@@@@@  @@@@@@@@  @@'  '@@  @@\n   @@'   .@@@@@@@.     .@@@@@@@@    '@@     @@@@@@@@@  @@@@@@@@@  @@@@@@@@@  @@@@@@@@  @@.  .@@  @@\n  @@'   @@@@@@@@@@@   :@@@@@@@@@@    '@@    @@@                                         '@@@@'   @@\n @@@   :@@@@@@@@@@@.  @@@@@@@@@@@@    @@@   @@@                                           ''     @@\n @@    @@@@@'@@@@@@@ :@@@@'@@@@@@@     @@   @@@                                                  @@       .@@@@@@@@@@@.\n.@@    @@@@@ @@@@@@@ :@@@@ @@@@@@@     @@:  @@@   @@    .@@@@@@@    .@@@@@@@              @@     @@    .@@@@@@@@@@@@@@'\n@@@     @@@' @@@@@@.  @@@@ @@@@@@@     @@+  @@@   @@ .@@@@:      .@@@@'                   @@     @@   @@@'\n@@@      @@  @@@@@     '@' @@@@@'      @@:  @@@   @@@@@'        @@@'                      @@     @@  .@@\n'@@          @@            @@          @@   @@@   @@@@         @@@                        @@     @@  @@@\n @@.         @@            @@         .@@   @@@   @@@         @@@                         @@     @@  .@@.\n  @@.        '@@@.         @@        .@@    @@@   @@@         @@'                    ..          @@   .@@@@......\n  '@@          '@@@@@@@@@@.@@       .@@'    @@@   @@'         @@.                   .@@          @@     .@@@@@@@@@@@.\n   '@@.                  @@@@      .@@'     @@@   @@'         @@@                   +@@   @@     @@              '@@@.\n     @@@.                 '@@     @@@       @@@   @@'         '@@.                 .@@@   @@     @@                 @@@\n      '@@@.                @@  .@@@'        @@@   @@'          '@@.               .@@@@   @@     @@                 @@@\n        .@@@@.             @@@@@@'          @@@   @@'           '@@@.           .@@@ @@   @@     @@                @@@\n           .@@@@@@@.....   @@@.             @@@   @@'             '@@@@@.....@@@@@'  @@   @@     @@  .@@@@@@@@@@@@@@@\n               '@@@@@@@@                    @@@   @@.                '@@@@@@@@@'     @@   @@     @@  '@@@@@@@@@@@@'\n\n    `\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/config/database.js":"/**\n * Database Configuration\n * (app.config.database)\n *\n * Configure the ORM layer, connections, etc.\n *\n * @see {@link http://trailsjs.io/doc/config/database}\n */\n\n'use strict'\n\nmodule.exports = {\n\n  /**\n   * Define the database stores. A store is typically a single database.\n   *\n   * Use the SQLite3 by default for development purposes.\n   *\n   * Set production connection info in config/env/production.js\n   */\n  stores: {\n\n    /**\n     * Define a store called \"local\" which uses SQLite3 to persist data.\n     *\n     * To use this store, uncomment the \"sqlitedev\" store section below, and\n     * run \"npm install --save waterline-sqlite3\"\n     */\n\n    /*\n     dev: {\n      adapter: require('waterline-sqlite3'),\n      migrate: 'alter'\n    }\n     */\n  },\n\n  models: {\n    defaultStore: 'dev',\n    migrate: 'alter'\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/config/main.js":"/**\n * Trailpack Configuration\n * (app.config.main)\n *\n * @see http://trailsjs.io/doc/config/main\n */\n\n'use strict'\n\nconst path = require('path')\n\nmodule.exports = {\n\n  /**\n   * Order does *not* matter. Each module is loaded according to its own\n   * requirements.\n   */\n  packs: [\n    require('trailpack-repl'),\n    require('trailpack-router'),\n    require('<%- trailpacks %>')\n  ],\n\n  /**\n   * Define application paths here. \"root\" is the only required path.\n   */\n  paths: {\n    root: path.resolve(__dirname, '..'),\n    temp: path.resolve(__dirname, '..', '.tmp')\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/config/policies.js":"/**\n * Policies Configuration\n * (app.config.footprints)\n *\n * Define which prerequisites a request must pass before reaching the intended\n * controller action. By default, no policies are configured for controllers or\n * footprints, therefore the request always will directly reach the intended\n * handler.\n *\n * @see http://trailsjs.io/doc/config/policies\n */\n\n'use strict'\n\nmodule.exports = {\n\n  DefaultController: {\n    info: [ ]\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/config/routes.js":"/**\n * Routes Configuration\n * (trails.config.routes)\n *\n * Configure how routes map to views and controllers.\n *\n * @see http://trailsjs.io/doc/config/routes.js\n */\n\n'use strict'\n\nmodule.exports = [\n\n  /**\n   * Render the HelloWorld view\n   */\n  {\n    method: 'GET',\n    path: '/',\n    handler: 'ViewController.helloWorld'\n  },\n\n  /**\n   * Constrain the DefaultController.info handler to accept only GET requests.\n   */\n  {\n    method: [ 'GET' ],\n    path: '/api/v1/default/info',\n    handler: 'DefaultController.info'\n  }\n]\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/config/session.js":"/**\n * Session Configuration\n * (app.config.session)\n *\n * @see http://trailsjs.io/doc/config/session.js\n */\n\n'use strict'\n\nmodule.exports = {\n\n  /**\n   * Define the session implementation, e.g. 'jwt' or 'cookie'\n   */\n  strategy: 'jwt',\n\n  /**\n   * Define jwt-specific options\n   */\n  jwt: {\n    secret: '',\n    connection: 'localStorage',\n    model: 'WebToken'\n  },\n\n  /**\n   * Define cookie-specific options\n   */\n  cookie: {\n    maxAge: 24 * 60 * 60 * 1000\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/config/views.js":"/**\n * Views Configuration\n * (app.config.views)\n *\n * @see http://trailsjs.io/doc/config/views.js\n */\n\n'use strict'\n\nmodule.exports = {\n\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/api/services/DefaultService.js":"'use strict'\n\nconst Service = require('trails/service')\n\n/**\n * @module DefaultService\n *\n * @description Default Service included with a new Trails app\n * @see {@link http://trailsjs.io/doc/api/services}\n * @this TrailsApp\n */\nmodule.exports = class DefaultService extends Service {\n\n  /**\n   * Return some info about this application\n   */\n  getApplicationInfo() {\n    const trailpacks = []\n    Object.keys(this.app.packs).forEach(packName => {\n      if (packName != 'inspect') {\n        const pack = this.app.packs[packName]\n        trailpacks.push({\n          name: pack.name,\n          version: pack.pkg.version\n        })\n      }\n    })\n    return {\n      app: this.app.pkg.version,\n      node: process.version,\n      libs: process.versions,\n      trailpacks: trailpacks\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-trails/node_modules/trails/archetype/config/env/testing.js":"'use strict'\n\nmodule.exports = {\n\n  trailpack: {\n    disabled: [\n      'repl'\n    ]\n  }\n}\n"}